"""
SUDO Click Global - C√¥ng c·ª• click v·ªõi Global Hotkey
Author: Sudo
Version: 5.0.0 - Perfect Edition
"""

import tkinter as tk
import time
import threading
import webbrowser
import sys
import ctypes
from ctypes import wintypes
import keyboard  # Th∆∞ vi·ªán keyboard cho global hotkey

# Windows API constants
WM_LBUTTONDOWN = 0x0201
WM_LBUTTONUP = 0x0202

class SUDOClickGlobal:
    def __init__(self):
        """Kh·ªüi t·∫°o ·ª©ng d·ª•ng SUDO Click Global"""
        self.root = tk.Tk()
        self.is_running = False
        self.current_position = None
        self.click_count = 0
        self.total_clicks = 50
        self.click_delay = 0.2
        self.hotkey = 'f9'  # Ph√≠m t·∫Øt global
        
        # Load Windows API functions
        try:
            self.user32 = ctypes.windll.user32
            self.kernel32 = ctypes.windll.kernel32
        except:
            print("‚ö† Kh√¥ng th·ªÉ load Windows API, s·ª≠ d·ª•ng fallback")
            self.user32 = None
        
        self.setup_window()
        self.setup_widgets()
        self.setup_global_hotkey()
        
        # In th√¥ng tin kh·ªüi ƒë·ªông
        print("=== SUDO Click Global v5.0.0 by Sudo ===")
        print("üåç Global Hotkey - Ho·∫°t ƒë·ªông ·ªü m·ªçi ·ª©ng d·ª•ng!")
        print("üî• T√≠nh nƒÉng:")
        print(f"  - Ph√≠m t·∫Øt GLOBAL: {self.hotkey.upper()}")
        print("  - Ho·∫°t ƒë·ªông khi ƒëang trong game/app kh√°c")
        print("  - Kh√¥ng c·∫ßn focus v√†o SUDO Click")
        print("  - Click ƒë∆∞·ª£c v√†o m·ªçi ph·∫ßn m·ªÅm")
        print("  - 50 l·∫ßn click ƒë√¥i v·ªõi delay 0.2s")
        print("üìñ H∆∞·ªõng d·∫´n:")
        print("  1. ƒê·ªÉ SUDO Click ch·∫°y n·ªÅn")
        print("  2. V√†o game/app kh√°c")
        print(f"  3. Hover chu·ªôt + nh·∫•n {self.hotkey.upper()} ƒë·ªÉ click")
        print(f"  4. Nh·∫•n {self.hotkey.upper()} l·∫°i ƒë·ªÉ d·ª´ng")
        print("‚ö† L∆∞u √Ω: Ch·∫°y v·ªõi quy·ªÅn Administrator!")
        print("=====================================")
    
    def setup_window(self):
        """C·∫•u h√¨nh c·ª≠a s·ªï ch√≠nh"""
        self.root.title("SUDO Click")
        self.root.geometry("300x250")
        self.root.resizable(False, False)
        self.root.configure(bg='#f0f0f0')
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window()
        
        # ƒê·∫∑t c·ª≠a s·ªï lu√¥n ·ªü tr√™n c√πng
        self.root.attributes('-topmost', True)
        
        # Minimize to system tray style
        self.root.protocol("WM_DELETE_WINDOW", self.minimize_to_tray)
    
    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def minimize_to_tray(self):
        """·∫®n c·ª≠a s·ªï thay v√¨ ƒë√≥ng"""
        self.root.withdraw()  # ·∫®n c·ª≠a s·ªï
        print("üí° SUDO Click ƒëang ch·∫°y n·ªÅn. Nh·∫•n F9 ·ªü b·∫•t k·ª≥ ƒë√¢u!")
    
    def show_window(self):
        """Hi·ªán l·∫°i c·ª≠a s·ªï"""
        self.root.deiconify()
        self.root.lift()
        self.root.attributes('-topmost', True)
    
    def setup_widgets(self):
        """T·∫°o giao di·ªán ƒë∆°n gi·∫£n"""
        # Main frame
        self.main_frame = tk.Frame(self.root, bg='#f0f0f0', padx=10, pady=10)
        self.main_frame.pack(fill='both', expand=True)
        
        # Status text variable
        self.status_text = tk.StringVar()
        self.status_text.set(f"Nh·∫•n {self.hotkey.upper()} ƒë·ªÉ ch·∫°y")
        
        # Main status button - TO G·∫§PE ƒê√îI
        self.main_button = tk.Button(
            self.main_frame,
            textvariable=self.status_text,
            font=('Arial', 10),
            relief='raised',
            bd=1,
            padx=5,
            pady=12,  # TƒÉng g·∫•p ƒë√¥i t·ª´ 5 l√™n 12
            width=22,
            state='disabled',
            bg='white',
            fg='black'
        )
        self.main_button.pack(pady=(0, 8))
        
        # Global status label - TEXT M·ªöI D√ÄI H∆†N
        self.global_label = tk.Label(
            self.main_frame,
            text="Ch·∫°y ph·∫ßn m·ªÅm n√†y v·ªõi quy·ªÅn Administrator,\nƒë∆∞a chu·ªôt v√†o v·ªã tr√≠ c·∫ßn click v√† nh·∫•n F9\nƒë·ªÉ Ch·∫°y ho·∫∑c D·ª´ng.",
            font=('Arial', 8),
            bg='#f0f0f0',
            fg='green',
            justify='center'
        )
        self.global_label.pack(pady=(0, 8))
        
        # Version label - TH√äM PHI√äN B·∫¢N
        self.version_label = tk.Label(
            self.main_frame,
            text="Phi√™n b·∫£n 5.0.0",
            font=('Arial', 7),
            bg='#f0f0f0',
            fg='gray'
        )
        self.version_label.pack(pady=(0, 8))
        
        # Help button
        self.help_button = tk.Button(
            self.main_frame,
            text="H·ªó tr·ª£",
            font=('Arial', 9),
            relief='raised',
            bd=1,
            padx=5,
            pady=3,
            width=22,
            command=self.open_help,
            bg='white',
            fg='black'
        )
        self.help_button.pack(pady=(0, 5))
        
        # Exit instruction
        self.exit_instruction = tk.Label(
            self.main_frame,
            text="Nh·∫•n n√∫t Tho√°t ƒë·ªÉ t·∫Øt h·∫≥n ph·∫ßn m·ªÅm",
            font=('Arial', 7),
            bg='#f0f0f0',
            fg='red'
        )
        self.exit_instruction.pack(pady=(0, 5))
        
        # Exit button
        self.exit_button = tk.Button(
            self.main_frame,
            text="Tho√°t",
            font=('Arial', 9),
            relief='raised',
            bd=1,
            padx=5,
            pady=3,
            width=22,
            command=self.exit_app,
            bg='#ffcccc',
            fg='red'
        )
        self.exit_button.pack()
    
    def setup_global_hotkey(self):
        """ƒêƒÉng k√Ω global hotkey"""
        try:
            # ƒêƒÉng k√Ω ph√≠m t·∫Øt global
            keyboard.add_hotkey(self.hotkey, self.on_global_hotkey)
            print(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω global hotkey: {self.hotkey.upper()}")
            
            # ƒêƒÉng k√Ω th√™m Ctrl+Shift+S ƒë·ªÉ hi·ªán c·ª≠a s·ªï
            keyboard.add_hotkey('ctrl+shift+s', self.show_window)
            print("‚úÖ ƒêƒÉng k√Ω Ctrl+Shift+S ƒë·ªÉ hi·ªán c·ª≠a s·ªï")
            
        except Exception as e:
            print(f"‚ùå L·ªói ƒëƒÉng k√Ω global hotkey: {e}")
            print("‚ö† C√≥ th·ªÉ c·∫ßn ch·∫°y v·ªõi quy·ªÅn Administrator")
            
            # Fallback: local hotkey
            self.root.bind(f'<KeyPress-{self.hotkey.upper()}>', self.on_global_hotkey)
            self.root.focus_set()
    
    def get_cursor_position(self):
        """L·∫•y v·ªã tr√≠ chu·ªôt b·∫±ng Windows API"""
        try:
            if self.user32:
                point = wintypes.POINT()
                self.user32.GetCursorPos(ctypes.byref(point))
                return (point.x, point.y)
            else:
                # Fallback method
                import pyautogui
                pos = pyautogui.position()
                return (int(pos.x), int(pos.y))
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y v·ªã tr√≠ chu·ªôt: {e}")
            return (500, 300)
    
    def windows_click(self, x, y):
        """Click b·∫±ng Windows API"""
        try:
            if not self.user32:
                return self.fallback_click(x, y)
            
            # L·∫•y handle c·ªßa c·ª≠a s·ªï t·∫°i v·ªã tr√≠ click
            hwnd = self.user32.WindowFromPoint(wintypes.POINT(x, y))
            
            if hwnd:
                # Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô screen sang client
                client_point = wintypes.POINT(x, y)
                self.user32.ScreenToClient(hwnd, ctypes.byref(client_point))
                
                # T·∫°o lParam t·ª´ t·ªça ƒë·ªô
                lParam = (client_point.y << 16) | (client_point.x & 0xFFFF)
                
                # Click ƒë√¥i b·∫±ng PostMessage
                self.user32.PostMessageW(hwnd, WM_LBUTTONDOWN, 0, lParam)
                time.sleep(0.01)
                self.user32.PostMessageW(hwnd, WM_LBUTTONUP, 0, lParam)
                time.sleep(0.01)
                self.user32.PostMessageW(hwnd, WM_LBUTTONDOWN, 0, lParam)
                time.sleep(0.01)
                self.user32.PostMessageW(hwnd, WM_LBUTTONUP, 0, lParam)
                
                return True
            else:
                return self.fallback_click(x, y)
                
        except Exception as e:
            print(f"‚ùå L·ªói Windows API: {e}")
            return self.fallback_click(x, y)
    
    def fallback_click(self, x, y):
        """Ph∆∞∆°ng ph√°p click fallback"""
        try:
            if self.user32:
                # Method 1: SetCursorPos + mouse_event
                self.user32.SetCursorPos(x, y)
                time.sleep(0.01)
                self.user32.mouse_event(0x0002, 0, 0, 0, 0)  # LEFTDOWN
                time.sleep(0.01)
                self.user32.mouse_event(0x0004, 0, 0, 0, 0)  # LEFTUP
                time.sleep(0.01)
                self.user32.mouse_event(0x0002, 0, 0, 0, 0)  # LEFTDOWN
                time.sleep(0.01)
                self.user32.mouse_event(0x0004, 0, 0, 0, 0)  # LEFTUP
                return True
            else:
                # Method 2: pyautogui fallback
                import pyautogui
                pyautogui.doubleClick(x, y)
                return True
        except Exception as e:
            print(f"‚ùå L·ªói fallback click: {e}")
            return False
    
    def on_global_hotkey(self):
        """X·ª≠ l√Ω khi nh·∫•n global hotkey"""
        print(f"üî• Global hotkey {self.hotkey.upper()} ƒë∆∞·ª£c nh·∫•n!")
        print(f"   Tr·∫°ng th√°i: {'ƒëang ch·∫°y' if self.is_running else 'ƒë√£ d·ª´ng'}")
        
        if not self.is_running:
            self.start_clicking()
        else:
            self.stop_clicking()
    
    def start_clicking(self):
        """B·∫Øt ƒë·∫ßu auto-clicking"""
        try:
            # L·∫•y v·ªã tr√≠ chu·ªôt hi·ªán t·∫°i
            self.current_position = self.get_cursor_position()
            print(f"üìç V·ªã tr√≠ click: {self.current_position}")
            
            self.is_running = True
            self.click_count = 0
            self.status_text.set(f"Nh·∫•n {self.hotkey.upper()} ƒë·ªÉ d·ª´ng")
            
            print("üöÄ B·∫Øt ƒë·∫ßu global auto-click...")
            
            # B·∫Øt ƒë·∫ßu clicking trong thread ri√™ng
            click_thread = threading.Thread(target=self.click_loop, daemon=True)
            click_thread.start()
            
        except Exception as e:
            print(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu: {e}")
    
    def stop_clicking(self):
        """D·ª´ng auto-clicking"""
        self.is_running = False
        self.status_text.set(f"Nh·∫•n {self.hotkey.upper()} ƒë·ªÉ ch·∫°y")
        print(f"‚èπ ƒê√£ d·ª´ng! Ho√†n th√†nh {self.click_count} l·∫ßn click")
    
    def click_loop(self):
        """V√≤ng l·∫∑p th·ª±c hi·ªán click"""
        try:
            print(f"üéØ B·∫Øt ƒë·∫ßu global click {self.total_clicks} l·∫ßn t·∫°i {self.current_position}")
            
            while self.is_running and self.click_count < self.total_clicks:
                if self.current_position:
                    x, y = self.current_position
                    success = self.windows_click(x, y)
                    
                    if success:
                        self.click_count += 1
                        remaining = self.total_clicks - self.click_count
                        print(f"üñ± Global Click {self.click_count}/{self.total_clicks} (c√≤n {remaining})")
                        
                        # C·∫≠p nh·∫≠t UI thread-safe
                        self.root.after(0, lambda: self.status_text.set(f"ƒêang ch·∫°y... ({remaining} l·∫ßn)"))
                    
                    time.sleep(self.click_delay)
                else:
                    break
            
            # Ho√†n th√†nh
            self.is_running = False
            if self.click_count >= self.total_clicks:
                print("‚úÖ Ho√†n th√†nh t·∫•t c·∫£ global clicks!")
                self.root.after(0, lambda: self.status_text.set("Ho√†n th√†nh! F9 ƒë·ªÉ ch·∫°y l·∫°i"))
                self.root.after(3000, lambda: self.status_text.set(f"Nh·∫•n {self.hotkey.upper()} ƒë·ªÉ ch·∫°y"))
            else:
                self.root.after(0, lambda: self.status_text.set(f"Nh·∫•n {self.hotkey.upper()} ƒë·ªÉ ch·∫°y"))
                
        except Exception as e:
            print(f"‚ùå L·ªói trong v√≤ng l·∫∑p: {e}")
            self.is_running = False
    
    def open_help(self):
        """M·ªü trang web h·ªó tr·ª£"""
        try:
            print("üåê M·ªü trang h·ªó tr·ª£...")
            webbrowser.open("https://nguyencaotu.com")
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ m·ªü tr√¨nh duy·ªát: {e}")
    
    def exit_app(self):
        """Tho√°t ho√†n to√†n kh·ªèi ·ª©ng d·ª•ng"""
        try:
            print("üëã ƒêang tho√°t SUDO Click...")
            # D·ªçn d·∫πp global hotkey
            keyboard.unhook_all()
            # D·ª´ng auto-clicking n·∫øu ƒëang ch·∫°y
            self.is_running = False
            # ƒê√≥ng ·ª©ng d·ª•ng
            self.root.quit()
            self.root.destroy()
        except Exception as e:
            print(f"‚ùå L·ªói khi tho√°t: {e}")
        finally:
            sys.exit(0)
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            print("üí° Tip: ƒê√≥ng c·ª≠a s·ªï ƒë·ªÉ ch·∫°y n·ªÅn, Ctrl+Shift+S ƒë·ªÉ hi·ªán l·∫°i")
            self.root.mainloop()
        except KeyboardInterrupt:
            print("\nüëã ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói ·ª©ng d·ª•ng: {e}")
        finally:
            try:
                keyboard.unhook_all()
            except:
                pass
            print("üîö SUDO Click Global ƒë√£ k·∫øt th√∫c")

def main():
    """H√†m ch√≠nh"""
    try:
        app = SUDOClickGlobal()
        app.run()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi ƒë·ªông SUDO Click Global: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main()
